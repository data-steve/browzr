{
    "collab_server" : "",
    "contents" : "---\nauthor: Brendan Rocks\ndescription: |\n    A few weeks ago I gave a talk at BARUG (and wrote a post) about blogging\n    with the excellent knitr-jekyll repo. Yihui's system is fantastic, but\n    it does have one drawback: None of those fancy new htmlwidgets packages\n    seem to work...\ngoogle-site-verification: 'mN-0GdjM2KkKB8OPxvWfwJvElAOwn0dx9IhWDBbACpI'\nog:description: |\n    A few weeks ago I gave a talk at BARUG (and wrote a post) about blogging\n    with the excellent knitr-jekyll repo. Yihui's system is fantastic, but\n    it does have one drawback: None of those fancy new htmlwidgets packages\n    seem to work...\nog:image: 'http://brendanrocks.com/images/the\\_pride.png'\nog:title: Using htmlwidgets with knitr and Jekyll\nog:url: 'http://brendanrocks.com/htmlwidgets-knitr-jekyll/'\ntitle: Using htmlwidgets with knitr and Jekyll\ntwitter:card: summary\ntwitter:creator: '@rocksbrendan'\ntwitter:description: |\n    A few weeks ago I gave a talk at BARUG (and wrote a post) about blogging\n    with the excellent knitr-jekyll repo. Yihui's system is fantastic, but\n    it does have one drawback: None of those fancy new htmlwidgets packages\n    seem to work...\ntwitter:image:src: 'http://brendanrocks.com/images/the\\_pride.png'\ntwitter:site: '@rocksbrendan'\ntwitter:title: Using htmlwidgets with knitr and Jekyll\ntwitter:url: 'http://brendanrocks.com/htmlwidgets-knitr-jekyll/'\nviewport: 'width=device-width,initial-scale=1'\n...\n\n<div class=\"container\">\n\n<div class=\"navbar-header\">\n\n<span class=\"sr-only\">Toggle navigation</span> <span\nclass=\"icon-bar\"></span> <span class=\"icon-bar\"></span> <span\nclass=\"icon-bar\"></span>\n[Brendan Rocks](/)\n\n</div>\n\n<div id=\"navbar\" class=\"navbar-collapse collapse\">\n\n-   [About](/about/)\n-   [Blog](/blog/)\n-   [Work](/work)\n\n</div>\n\n</div>\n\n<div class=\"page-content\">\n\n<div class=\"wrapper\">\n\n<div class=\"post\">\n\n<div id=\"page-content-wrapper\">\n\n<div class=\"container-fluid\">\n\n<div class=\"row\">\n\n<div id=\"bdy-space\" class=\"col-lg-9 center-block\">\n\n<div class=\"site-section\">\n\n[The Blog](/blog)\n\n</div>\n\nUsing htmlwidgets with knitr and Jekyll {.post-title}\n=======================================\n\nNov 15, 2015\n\n![](../images/the_pride.png)\n\\\nA few weeks ago I gave a talk at [BARUG](http://www.meetup.com/R-Users/)\n(and wrote a [post](/blogging)) about blogging with the excellent\n[`knitr-jekyll`](https://github.com/yihui/knitr-jekyll) repo. Yihui’s\nsystem is fantastic, but it does have one drawback: None of those fancy\nnew [htmlwidgets](htmlwidgets.org) packages seem to work…\n\nA [few](https://twitter.com/bradleyboehmke/status/657384057697902593)\n[people](https://github.com/yihui/knitr-jekyll/issues/8) have run into\nthis. I recently figured out how to fix it for this blog (which required\na bit of time reading through the rmarkdown source), so I thought I’d\nwrite it up in case it helps anyone else, or my future-self.\n\nTL;DR\n=====\n\nYou can add a line to `build.R` which calls a small wrapper function I\ncobbled together\n([`brocks::htmlwidgts_deps`](https://github.com/brendan-R/brocks/blob/master/R/blog_stuff.R)),\nadd a [snippet](#including-the-extra-html) of liquid syntax to\n`./_layouts/post.html`, and you’re away.\n\nWhat’s going on?\n================\n\nOften, when you ‘knit’ an .Rmd file to HTML, (perhaps without knowing\nit) you’re doing it via the `rmarkdown` package, which adds its own\ninvisible magic to the process. Behind the scenes, `rmarkdown` uses\n`knitr` to convert the file to markdown format, and then uses `pandoc`\nto convert the markdown to HTML.\n\nWhile `knitr` executes R code and embeds results, htmlwidgets packages\n(such as `leaflet`, `DiagrammR`, `threejs`, and `metricsgraphics`) also\nhave js and css dependencies. These are handled by `rmarkdown`’s second\nstep, and so don’t get included when using `knitr` alone.\n\nThe `rmarkdown` invisible magic works as follows:\n\n-   It parses the .Rmd for special dependencies objects, linking to the\n    js/css source (by calling `knitr::knit_meta`)\n-   It then (by default) combines their source-code into a huge\n    `data:uri` blob, which it writes to a temp-file\n-   This is injected into the the final HTML file, by passing it to\n    `pandoc`’s `--include-in-header` argument\n\nA fix: htmlwdigets\\_deps\n========================\n\nHappily, including bits of HTML in other bits of HTML is one of Jekyll’s\nstrengths, and it’s possible to high-jack the\n[internals](https://github.com/rstudio/rmarkdown/blob/8a8d3d58d57e36647ffd20aa5ec181228cc77b97/R/html_dependencies.R#L73)\nof `rmarkdown` to do something appropriate. I did this with a little\nfunction `htmlwdigets_deps`, which:\n\n-   Copies the js/css dependencies from the R packages, into a dedicated\n    assets folder within in your blog\n\n-   Writes a little HTML file, containing the links to the source code\n    above\n\nWith a small tweak to the `post.html` file, Jekyll’s liquid templating\nsystem can be used to pull in that little HTML file, if htmlwidgets are\ndetected in your post.\n\nIf you’re using `knitr-jekyll`, all that’s needed to make everything\nwork as you’d expect, is to call the function from your `build.R` file,\nlike so:\n\n``` {.r}\nlocal({\n  # Your existing configurations...\n  # See https://github.com/yihui/knitr-jekyll/blob/gh-pages/build.R\n  brocks::htmlwidgets_deps(a)\n})\n```\n\n(The parameter `a` refers to the input file — if you’re using a build\nfile anything like Yihui’s example, this will work fine.)\n\nIf you’d like to have a look at the internals of `htmlwidgets_deps`\nyourself, it’s in my personal package [up on\nGitHub](https://github.com/brendan-R/brocks/blob/master/R/blog_stuff.R).\nLong story short, it mimicks the process of\n[`rmarkdown:::html_dependencies_as_string`](https://github.com/rstudio/rmarkdown/blob/8a8d3d58d57e36647ffd20aa5ec181228cc77b97/R/html_dependencies.R#L73),\nusing functions from the\n[htmltools](https://cran.rstudio.com/web/packages/htmltools/) package.\nThe rest of this post walks through what it actually does to your files.\n\n1. Copying dependencies to your site\n------------------------------------\n\nTo keep things transparent, the dependency *source* files are kept in\ntheir own folder (`./htmlwidgets_deps`). If it doesn’t exist, it’ll be\ncreated. This behaviour is different to the `rmarkdown` default of\ncompressing everything into huge in-line `data:uri` blobs. While that\nworks great for keeping everything in one big self-contained file\n(e.g. to email to someone), it makes for a very slow web page. Having\nseparate files is preferable for a blog, as it allows the browser to\nload files *asynchronously*, reducing the load time.\n\nAfter compiling your site, if you’ve used htmlwidgets you’ll have the\nextra `./htmelwidgets_deps` directory within your blog, containing the\nsource for all the dependencies, a bit like this:\n\n    - _includes\n    - _layouts\n    - _posts\n    - _sass\n    - _site\n    - _source\n    - js/\n    - css/\n    - htmlwidgets_deps/\n        - d3-3.5.3/\n            - LICENCE\n            - bower.json\n            - d3.js\n            - d3.min.js\n        - jquery-1.11.1\n            - AUTHORS.txt\n            - jquery.min.js\n        - ...\n    - ...\n\n2. Writing the extra HTML\n-------------------------\n\nOnce all the dependencies are ready to be served from your site, you\nstill need to add HTML pointers to your blog post, so that it knows\nwhere to find them. `htmlwidgets_deps` automates this, by adding a file\nfor each htmlwidgets post to the `./_includes` directory (which is where\nJekyll goes to look for HTML files to include). For each post which\nrequires it, the extra HTML file will be generated in the `htmlwidgets`\nsub-directory, like this:\n\n    - _includes/\n        - htmlwidgets/\n            - my-new-htmlwidgets-post.html\n        - footer.html\n        - head.html\n        - header.html\n    - _layouts/\n    ...\n\nThe file itself if pretty simple. Here’s an example:\n\n``` {.html}\n<script src=\"{{ \"/htmlwidgets_deps/htmlwidgets-0.5/htmlwidgets.js\" | prepend: site.baseurl }}\"></script>\n<script src=\"{{ \"/htmlwidgets_deps/jquery-2.1.3/dist/jquery.min.js\" | prepend: site.baseurl }}\"></script>\n<script src=\"{{ \"/htmlwidgets_deps/d3-3.5.3/d3.min.js\" | prepend: site.baseurl }}\"></script>\n<link href=\"{{ \"/htmlwidgets_deps/metrics-graphics-2.1.0/dist/metricsgraphics.css\" | prepend: site.baseurl }}\" rel=\"stylesheet\" />\n<script src=\"{{ \"/htmlwidgets_deps/metrics-graphics-2.1.0/dist/metricsgraphics.min.js\" | prepend: site.baseurl }}\"></script>\n<script src=\"{{ \"/htmlwidgets_deps/metricsgraphics-binding-0.8.5/metricsgraphics.js\" | prepend: site.baseurl }}\"></script>\n```\n\nThe HTML comes pre-wrapped in the usual liquid syntax.\n\n3. Including the extra HTML\n---------------------------\n\nNow you have a little file to include, you just need to get it into the\nHTML of the blog post. Jekyll’s templating system liquid is all about\ndoing this.\n\nBecause `htmlwdigets_deps` gives the dependency file the same name as\nyour `.Rmd` input (and thus the post), it’s quite easy to write a short\n`{% include %}` statement, based on the name of the page itself.\nHowever, things get tricky if the file doesn’t exist. By default,\n`htmlwdigets_deps` only produces files when necessary (e.g. when you are\nactually using htmlwidgets). To handle this, I used a\n[plugin](https://github.com/michaelx/jekyll_file_exists), providing the\n`file_exists` function.\n\nAdding the following the bottom of `./_layouts/default.html` did the\ntrick. You could also use `./_layouts/post.html` if you wanted to. It’s\na good idea to put it towards to the bottom, otherwise the page won’t\nload until all the htmlwdigets dependencies are loaded, which could make\nthings feel rather slow.\n\n``` {.html}\n<!-- htmlwidgets dependencies --> \n{% assign dep_file = page.url | split: '/' | last | prepend : 'htmlwidgets/' %}\n{% assign dep_file_inc = dep_file | prepend : '_includes/' %}\n{% capture hw_used %}{% file_exists {{ dep_file_inc }} %}{% endcapture %}\n\n{% if hw_used == \"true\" %}\n{% include {{dep_file}} %}\n{% endif %}\n```\n\n### With GitHub Pages\n\nThe solution above proves a little tricky if you’re using GitHub pages,\nas this doesn’t allow plugins. While I’m sure an expert with the liquid\ntemplating engine could come up with a brilliant solution to this, in\nlieu, I present a filthy untested hack.\n\nBy setting the `htmlwdigets_deps` parameter `always = TRUE`, a\ndependencies file will always be produced, even if there’s no\nhtmlwidgets detected (the file will be empty). This means that you can\ndo-away with the logic part (and the plugin), and simply add the lines:\n\n``` {.html}\n<!-- htmlwidgets dependencies --> \n{% assign dep_file = page.url | split: '/' | last | prepend : 'htmlwidgets/' %}\n{% include {{dep_file}} %}\n```\n\nThe disadvantage is that you’ll end up with some empty HTML files in\n`./_includes/htmlwidgets/`, which may or may not bother you. If you’re\nonly going to be using htmlwidgets for blog posts (and not the rest of\nyour site) I’d recommend doing this for the `./_layouts/post.html` file,\n(as opposed to `default.html`) so that other pages don’t have trouble\nfinding dependencies they don’t need.\n\nIf you give this a crack, let me know!\n\nHow to do the same\n==================\n\nIn summary:\n\n-   Add the [snippet](#including-the-extra-html) of liquid syntax to one\n    of your layout files\n\n-   Add the following line to your `build.R` file, just below the call\n    to `knitr::knit`\n\n``` {.r}\nbrocks::htmlwidgets_deps(a)\n```\n\nAnd you should be done!\n\nShowing Off\n===========\n\nAfter all that, it would be a shame not to show off some interactive\nvisualisations. Here are some of the htmlwidgets packages I’ve had the\nchance to muck about with so far.\n\nMetricsGraphics\n---------------\n\n[MetricsGraphics.js](http://metricsgraphicsjs.org/) is a JavaScript API,\nbuilt on top of [d3.js](http://d3js.org/), which allows you to produce a\nlot of common plots very quickly (without having to start from scratch\neach time). There’s a few libs like this, but MetricsGraphics is\nespecially pleasing. Huge thanks to [Ali\nAlmossawi](http://almossawi.com/) and Mozilla, and also to [Bob\nRudis](http://rud.is/b/) for the R interface.\n\n``` {.r}\nlibrary(metricsgraphics)\n\nplots <- lapply(1:4, function(x) {\n  mjs_plot(rbeta(1000, x, x), width = 300, height = 300, linked = TRUE) %>%\n    mjs_histogram(bar_margin = 2) %>%\n    mjs_labs(x_label = sprintf(\"Plot %d\", x))\n})\n\nmjs_grid(plots)\n```\n\n+--------------------------------------+--------------------------------------+\n| <div                                 | <div                                 |\n| id=\"mjs-8f1051875a49d0df9f0db0673121 | id=\"mjs-965257cb88c3e90f251c61ce4649 |\n| db\"                                  | db\"                                  |\n| class=\"metricsgraphics\"              | class=\"metricsgraphics\"              |\n| style=\"width:300px;height:300px\">    | style=\"width:300px;height:300px\">    |\n|                                      |                                      |\n| </div>                               | </div>                               |\n|                                      |                                      |\n| <div                                 | <div                                 |\n| id=\"mjs-8f1051875a49d0df9f0db0673121 | id=\"mjs-965257cb88c3e90f251c61ce4649 |\n| db-legend\"                           | db-legend\"                           |\n| class=\"metricsgraphics-legend\">      | class=\"metricsgraphics-legend\">      |\n|                                      |                                      |\n| </div>                               | </div>                               |\n+--------------------------------------+--------------------------------------+\n| <div                                 | <div                                 |\n| id=\"mjs-723da1d290b3a67d43c4ccd60cf9 | id=\"mjs-13b1945ec3c64286f8308ceec6b1 |\n| 10\"                                  | 48\"                                  |\n| class=\"metricsgraphics\"              | class=\"metricsgraphics\"              |\n| style=\"width:300px;height:300px\">    | style=\"width:300px;height:300px\">    |\n|                                      |                                      |\n| </div>                               | </div>                               |\n|                                      |                                      |\n| <div                                 | <div                                 |\n| id=\"mjs-723da1d290b3a67d43c4ccd60cf9 | id=\"mjs-13b1945ec3c64286f8308ceec6b1 |\n| 10-legend\"                           | 48-legend\"                           |\n| class=\"metricsgraphics-legend\">      | class=\"metricsgraphics-legend\">      |\n|                                      |                                      |\n| </div>                               | </div>                               |\n+--------------------------------------+--------------------------------------+\n\nleaflet\n-------\n\n[leaflet.js](http://leafletjs.com/) allows you to create *beautiful*,\nmobile-friendly maps (based on\n[OpenStreetMap](http://www.openstreetmap.org/) data), incredibly easily.\nHat tip to [Vladimir Agafonkin](http://agafonkin.com/en/), and [Joe\nCheng](https://twitter.com/jcheng) et al for the R interface!\n\nHere’s the *Pride of Spitalfields*, which I occasionally pine for, from\nbeneath the palm trees of sunny California.\n\n``` {.r}\nlibrary(leaflet)\n\nm <- leaflet() %>%\n  addTiles() %>%  # Add default OpenStreetMap map tiles\n  addMarkers(lng = -0.07125, lat = 51.51895, \n             popup = \"Reasonably Priced Stella Artois\")\nm\n```\n\n<div id=\"htmlwidget-4244\" class=\"leaflet\"\nstyle=\"width:504px;height:504px\">\n\n</div>\n\nthreejs\n-------\n\n[three.js](http://threejs.org/) is a gobsmackingly brilliant library for\ncreating animated, interactive 3D graphics from within a Web browser.\nHere’s an interactive 3D globe with the world’s populations mapped as,\nerm, light-sabers. Probably not as informative as a base graphics plot,\nbut it is much more *Bond villianish*. Drag it around and have a zoom!\n\n``` {.r}\nlibrary(threejs)\nlibrary(maps)\n## \n##  # ATTENTION: maps v3.0 has an updated 'world' map.        #\n##  # Many country borders and names have changed since 1990. #\n##  # Type '?world' or 'news(package=\"maps\")'. See README_v3. #\ndata(world.cities, package = \"maps\")\ncities <- world.cities[order(world.cities$pop,decreasing = TRUE)[1:1000],]\nvalue  <- 100 * cities$pop / max(cities$pop)\n\n# Set up a data color map and plot\ncol <- rainbow(10, start = 2.8 / 6, end = 3.4 / 6)\ncol <- col[floor(length(col) * (100 - value) / 100) + 1]\nglobejs(lat = cities$lat, long = cities$long, value = value, color = col,\n        atmosphere = TRUE)\n```\n\n<div id=\"htmlwidget-5002\" class=\"globe\"\nstyle=\"width:504px;height:504px\">\n\n</div>\n\n\\\n\\\nKudos to [Ricardo Cabello/mrdoob](http://mrdoob.com/) for three.js, and\n[Bryan W. Lewis](http://illposed.net/) for the [R\npackage](https://github.com/bwlewis/rthreejs).\n\nWrapping up\n-----------\n\nSo, there we go. I hope this might be useful to someone. If you do have\na go at using this, let me know how you get on!\n\n### EDIT: 2015-12-07\n\nThanks to Suren K in the comments below, I noticed that a plugin\ndependency had snuck in to my liquid markup for GitHub pages. Now fixed\nto use ‘pluginless’ liquid!\n\nTo see if the changes worked, I forked Yihui’s repo, and put a\n‘htmlwidgets-proofed’ version up on GitHub\n[here](https://github.com/brendan-r/knitr-jekyll), in case it helps\nanyone get this going.\n\n<div id=\"refs\" class=\"references\">\n\n</div>\n\n<div id=\"share-bar\" class=\"social-container\">\n\n<div>\n\nShare\n\n</div>\n\n<div>\n\n[**](https://twitter.com/intent/tweet?text=Using+htmlwidgets+with+knitr+and+Jekyll&url=http://brendanrocks.com/htmlwidgets-knitr-jekyll/&via=rocksbrendan&related=rocksbrendan \"Share on Twitter\")\n\n</div>\n\n<div>\n\n[**](http://www.linkedin.com/shareArticle?mini=true&url=http://brendanrocks.com/htmlwidgets-knitr-jekyll/)\n\n</div>\n\n<div>\n\n[**](javascript:window.open('https://facebook.com/sharer.php?u=http://brendanrocks.com/htmlwidgets-knitr-jekyll/',%20'_blank',%20'width=400,height=500');void(0);)\n\n</div>\n\n<div>\n\n[**](https://news.ycombinator.com/submitlink?u=http://brendanrocks.com/htmlwidgets-knitr-jekyll/)\n\n</div>\n\n</div>\n\n<div id=\"disqus_thread\">\n\n</div>\n\nPlease enable JavaScript to view the [comments powered by\nDisqus.](https://disqus.com/?ref_noscript)\n\n</div>\n\n<div class=\"col-lg-3\">\n\n<div class=\"hidden-print hidden-xs hidden-sm hidden-md affix-top\"\nrole=\"complementary\">\n\n<div id=\"post-sidebar\"\nstyle=\"line-height:180%;margin-left:60px;font-size:16px\">\n\n[**   Twitter\\\n](https://twitter.com/rocksbrendan) [**   Email\\\n](mailto:rocks.brendan@gmail.com) [**   GitHub\\\n](https://github.com/brendan-r) [**   LinkedIn\\\n](https://linkedin.com/in/brendanrocks) [**   RSS\\\n](/feed.xml)\\\n\\\n**Tags**\n\n<div class=\"tags\">\n\n[nps (3)](/tag/nps)\\\n[benchmarks (3)](/tag/benchmarks)\\\n[finance (1)](/tag/finance)\\\n[retail (1)](/tag/retail)\\\n[technology (1)](/tag/technology)\\\n[travel (1)](/tag/travel)\\\n[comcast (1)](/tag/comcast)\\\n[netflix (1)](/tag/Netflix)\\\n[telco (1)](/tag/telco)\\\n[entertainment (1)](/tag/entertainment)\\\n[r (2)](/tag/R)\\\n[statistics (2)](/tag/statistics)\\\n\n</div>\n\n\\\n\\\n**Blogroll**\n\n[Andrew Gelman](http://andrewgelman.com)\\\n[Mike Bostock](http://bl.ocks.org/mbostock)\\\n[Flowing Data](http://flowingdata.com/)\\\n[Tomasz Tunguz](http://tomtunguz.com/)\\\n[r-bloggers](http://r-bloggers.com)\\\n[statsblogs](http://www.statsblogs.com/)\\\n[Satmetrix](http://www.satmetrix.com/)\\\n[netpromoter.com](http://www.netpromoter.com/)\\\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n<div class=\"container\">\n\n\\\n© Brendan Rocks 2016\n\n[CONTENT POLICY](/content-policy/) | [TERMS](/terms-of-use/) |\n[PRIVACY](/privacy-statement/)\n\n</div>\n",
    "created" : 1464924666734.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1409579085",
    "id" : "5567AC47",
    "lastKnownWriteTime" : 1462486487,
    "last_content_update" : 1462486487,
    "path" : "~/Documents/repos/github_packages/browzr/data/test3.md",
    "project_path" : "data/test3.md",
    "properties" : {
        "chunk_rendered_width" : "650"
    },
    "relative_order" : 14,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "markdown"
}